import {
  GraphQLObjectType,
  GraphQLString,
  GraphQLSchema,
  GraphQLList,
  GraphQLID,
  GraphQLBoolean,
  GraphQLNonNull,
  GraphQLInputObjectType,
} from 'graphql/type';
import Question from './models/Question';

const validateQuestion = ({ text, answers }, cb) => {
  if (!text) return cb('Question text is required');
  if (!answers || !answers.length) return cb('An answer is required');
  // Test whether the answer array has at least one correct answer
  if (!answers.some(a => a.correct === true)) return cb('At least one answer needs to be correct');
  return cb();
};

const answerType = new GraphQLObjectType({
  name: 'Answer',
  description: 'An answer',
  fields: {
    _id: {
      description: 'ID of the answer, generated by the database',
      type: GraphQLID,
    },
    value: {
      description: 'The text value of the answer',
      type: new GraphQLNonNull(GraphQLString),
    },
    correct: {
      description: 'Whether the answer is correct or not',
      type: new GraphQLNonNull(GraphQLBoolean),
    },
  },
});

const answerInputType = new GraphQLInputObjectType({
  name: 'AnswerInput',
  description: (
    'An answer input, which includes the answer value and whether or not the answer is correct'
  ),
  fields: {
    value: { type: new GraphQLNonNull(GraphQLString) },
    correct: { type: new GraphQLNonNull(GraphQLBoolean) },
  },
});

// Define our question type
const questionType = new GraphQLObjectType({
  name: 'Question',
  description: 'A question',
  fields: {
    _id: {
      description: 'ID of the question, generated by the database',
      type: GraphQLID,
    },
    text: {
      description: 'The text value of the question',
      type: new GraphQLNonNull(GraphQLString),
    },
    answers: {
      description: 'The list of possible answers',
      type: new GraphQLNonNull(new GraphQLList(answerType)),
    },
  },
});

// Define our schema, with one top level field, named `question`, that
// takes an `id` argument and return the Question with that ID
const schema = new GraphQLSchema({
  query: new GraphQLObjectType({
    name: 'Query',
    description: 'The root query',
    fields: {
      questions: {
        description: 'Find all questions in the database',
        type: new GraphQLList(questionType),
        resolve: () => new Promise((resolve, reject) => {
          Question.find({}, (err, res) => (
            err ? reject(err) : resolve(res)
          ));
        }),
      },
      question: {
        description: 'Find a single question by id',
        type: questionType,
        args: {
          id: { type: new GraphQLNonNull(GraphQLString) },
        },
        resolve: (root, { id }) => new Promise((resolve, reject) => {
          Question.findById(id, (err, res) => (
            err ? reject(err) : resolve(res)
          ));
        }),
      },
    },
  }),
  mutation: new GraphQLObjectType({
    name: 'Mutation',
    description: 'The root mutation',
    fields: {
      createQuestion: {
        description: 'Create a single question',
        type: questionType,
        args: {
          text: { type: new GraphQLNonNull(GraphQLString) },
          answers: {
            type: new GraphQLList(answerInputType),
          },
        },
        resolve: (obj, args) => new Promise((resolve, reject) => {
          validateQuestion(args, (err) => {
            if (err) return reject(err);
            Question.create({
              text: args.text,
              answers: args.answers,
            }, (error, response) => (
              error ? reject(error) : resolve(response)
            ));
          });
        }),
      },
    },
  }),
});

export default schema;
